<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context-4.3.xsd
                           http://www.springframework.org/schema/mvc
                           http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd">

    <!--本配置文件是给名为mvc-dispatcher的DispatcherServlet使用，提供其相关的SpringMVC配置-->

    <!--启用Spring基于Annotation的DI（依赖注入），使用户能在SpringMVC中使用Spring的强大功能
        激活 @Required @Resource @Autowired @PostConstruct @PreDestroy 等注解-->
    <context:annotation-config/>

    <!--DispatcherServlet上下文，只管理@Controller标注的类，忽略其它标注如@Service、@Repository、@Component等的类，
        其他注解的类会交给Spring上下文来处理-->
    <context:component-scan base-package="com.kelly.springMVC">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--配置DispatcherServlet启用基于Annotation的HandlerMapping
        扩充了注解驱动，可将url中请求参数绑定到/映射到控制器方法中的输入参数-->
    <mvc:annotation-driven/>

    <!--静态资源处理，如css, js, images
        根目录是/webapp，往下有resource、WEB－INF和index.jsp-->
    <mvc:resources mapping="/resource/**" location="/resource/"/>

    <!--配置DispatcherServlet的ViewResolver，将jsp文件用JstlView来呈现
        一个DispatcherServlet可以配置多个ViewResolver，使用order属性排序
        注意InternalResourceViewResolver需要放在最后-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="order" value="2"/>
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--启用resolveLazily属性是为了推迟文件解析，以便获取文件大小异常-->
    <bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="52428800"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="resolveLazily" value="true"/>
    </bean>

    <!--json, xml, html等格式的数据用ContentNegotiatingViewResolver来负责呈现-->
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="order" value="1"/>
        <!--<property name="mediaTypes">-->
        <!--<map>-->
        <!--<entry key="json" value="application/json"/>-->
        <!--<entry key="xml" value="application/xml"/>-->
        <!--<entry key="htm" value="text/html"/>-->
        <!--</map>-->
        <!--</property>-->
        <property name="defaultViews">
            <list>
                <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView"/>
            </list>
        </property>
    </bean>

    <!--注册拦截器-->
    <mvc:interceptors>
        <mvc:interceptor>
            <!--配置拦截器的拦截规则-->
            <mvc:mapping path="/course/view/**"/>
            <bean class="com.kelly.springMVC.interceptor.InterceptorA"/>
        </mvc:interceptor>

        <mvc:interceptor>
            <mvc:mapping path="/course/view/**"/>
            <bean class="com.kelly.springMVC.interceptor.InterceptorB"/>
        </mvc:interceptor>

        <mvc:interceptor>
            <mvc:mapping path="/course/view/**"/>
            <bean class="com.kelly.springMVC.interceptor.InterceptorC"/>
        </mvc:interceptor>
    </mvc:interceptors>

</beans>